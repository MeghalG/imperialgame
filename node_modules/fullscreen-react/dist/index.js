"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.default = FullScreen;

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _screenfull = require("screenfull");

var _screenfull2 = _interopRequireDefault(_screenfull);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function FullScreen(_ref) {
  var isEnter = _ref.isEnter,
      _ref$onChange = _ref.onChange,
      onChange = _ref$onChange === undefined ? function (e) {
    return e;
  } : _ref$onChange,
      children = _ref.children;

  var _useState = (0, _react.useState)(null),
      _useState2 = _slicedToArray(_useState, 2),
      domNode = _useState2[0],
      setDomNode = _useState2[1];

  (0, _react.useEffect)(function () {
    if (domNode && _screenfull2.default.isEnabled) {
      if (isEnter) {
        _screenfull2.default.request(domNode);
      } else {
        _screenfull2.default.exit();
      }
    }
  }, [isEnter, domNode]);

  (0, _react.useEffect)(function () {
    if (_screenfull2.default.isEnabled) {
      var cb = function cb() {
        onChange(_screenfull2.default.isFullscreen);
      };

      _screenfull2.default.on("change", cb);
      return function () {
        _screenfull2.default.off("change", cb);
      };
    }
  }, [onChange]);

  var refFunc = (0, _react.useCallback)(function (dom) {
    setDomNode(dom);

    // The ref of the child element
    if (children) {
      if (children.ref instanceof Function) {
        children.ref(dom);
      } else if (children.ref) {
        children.ref.current = dom;
      }
    }
  }, [children]);

  if (!children) return null;

  return _react2.default.cloneElement(children, { ref: refFunc });
}